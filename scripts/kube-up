#!/bin/bash

# Spinner function to show task progress
spinner() {
    local message="$1"
    local delay=0.1
    local spinstr='|/-\'

    echo -ne "$message"
    while [ -e "/tmp/spinner.lock" ]; do
        for ((i = 0; i < ${#spinstr}; i++)); do
            printf "\r%s [%c] " "$message" "${spinstr:i:1}"
            sleep $delay
        done
    done
    printf "\r%s ✅ Done!     \n" "$message"
}

# Function to wait until nodes are detected (Ready/NotReady)
wait_for_node_presence() {
    local expected_nodes=3
    local timeout=300
    local elapsed=0

    touch /tmp/spinner.lock
    spinner "🔄 Waiting for $expected_nodes cluster nodes to appear..." &
    SPINNER_PID=$!

    while true; do
        node_count=$(kubectl get nodes --no-headers 2>/dev/null | wc -l)

        if [ "$node_count" -eq "$expected_nodes" ]; then
            rm -f /tmp/spinner.lock
            wait $SPINNER_PID 2>/dev/null
            echo -e "✅ Detected $expected_nodes cluster nodes (Ready/NotReady)."
            break
        fi

        sleep 10
        ((elapsed+=10))

        if [ "$elapsed" -ge "$timeout" ]; then
            rm -f /tmp/spinner.lock
            wait $SPINNER_PID 2>/dev/null
            echo "❌ Timeout: Expected $expected_nodes nodes did not appear."
            exit 1
        fi
    done
}

# Function to install Cilium CNI
install_cilium() {
    touch /tmp/spinner.lock
    spinner "🚀 Installing Cilium CNI..." &
    SPINNER_PID=$!

    helm repo add cilium https://helm.cilium.io/ > /dev/null 2>&1
    helm repo update > /dev/null 2>&1

    helm install > /dev/null 2>&1 \
        cilium \
        cilium/cilium \
        --version 1.15.6 \
        --namespace kube-system \
        --set ipam.mode=kubernetes \
        --set kubeProxyReplacement=false \
        --set securityContext.capabilities.ciliumAgent="{CHOWN,KILL,NET_ADMIN,NET_RAW,IPC_LOCK,SYS_ADMIN,SYS_RESOURCE,DAC_OVERRIDE,FOWNER,SETGID,SETUID}" \
        --set securityContext.capabilities.cleanCiliumState="{NET_ADMIN,SYS_ADMIN,SYS_RESOURCE}" \
        --set cgroup.autoMount.enabled=false \
        --set cgroup.hostRoot=/sys/fs/cgroup

    rm -f /tmp/spinner.lock
    wait $SPINNER_PID 2>/dev/null

    if [ $? -eq 0 ]; then
        echo "✅ Cilium installation completed!"
    else
        echo "❌ Cilium installation failed!"
        exit 1
    fi
}

# Function to wait until all nodes are Ready
wait_for_ready_nodes() {
    local expected_nodes=3
    local timeout=600
    local elapsed=0

    touch /tmp/spinner.lock
    spinner "⏳ Waiting for all $expected_nodes nodes to become Ready..." &
    SPINNER_PID=$!

    while true; do
        ready_count=$(kubectl get nodes --no-headers 2>/dev/null | awk '$2 == "Ready"' | wc -l)

        if [ "$ready_count" -eq "$expected_nodes" ]; then
            rm -f /tmp/spinner.lock
            wait $SPINNER_PID 2>/dev/null
            echo -e "✅ All $expected_nodes nodes are now Ready!"
            kubectl get nodes
            break
        fi

        sleep 10
        ((elapsed+=10))

        if [ "$elapsed" -ge "$timeout" ]; then
            rm -f /tmp/spinner.lock
            wait $SPINNER_PID 2>/dev/null
            echo "❌ Timeout: Nodes did not reach Ready state within $((timeout/60)) minutes."
            exit 1
        fi
    done
}

# Function to install MetalLB
install_metallb() {
    touch /tmp/spinner.lock
    spinner "⚡ Installing MetalLB..." &
    SPINNER_PID=$!

    cd /Users/julio/Documents/Projects/homelab/k8s-manifests/metallb || { echo "❌ Failed to change directory"; exit 1; }
    kubectl apply -f namespace.yaml > /dev/null 2>&1
    ./helm.sh > /dev/null 2>&1
    kubectl apply -f ipaddresspool.yaml > /dev/null 2>&1

    rm -f /tmp/spinner.lock
    wait $SPINNER_PID 2>/dev/null

    echo "✅ MetalLB installation completed!"
}

# Function to install Traefik
install_traefik() {
    touch /tmp/spinner.lock
    spinner "🌍 Installing Traefik..." &
    SPINNER_PID=$!

    cd /Users/julio/Documents/Projects/homelab/k8s-manifests/traefik || { echo "❌ Failed to change directory"; exit 1; }
    ./traefik.sh > /dev/null 2>&1

    cd dashboard || { echo "❌ Failed to change directory"; exit 1; }
    kubectl apply -f secret-dashboard.yaml > /dev/null 2>&1
    kubectl apply -f default-headers.yaml > /dev/null 2>&1
    kubectl apply -f middleware.yaml > /dev/null 2>&1
    kubectl apply -f ingress.yaml > /dev/null 2>&1

    rm -f /tmp/spinner.lock
    wait $SPINNER_PID 2>/dev/null

    echo "✅ Traefik installation completed!"
}

# Build cluster
touch /tmp/spinner.lock
spinner "🚀 Building cluster..." &
SPINNER_PID=$!
cd /Users/julio/Documents/Projects/homelab/terraform/proxmox || { echo "❌ Failed to change directory"; exit 1; }
terraform apply --auto-approve > /dev/null 2>&1
rm -f /tmp/spinner.lock
wait $SPINNER_PID 2>/dev/null

# Set up cluster nodes
touch /tmp/spinner.lock
spinner "⚙️ Setting up cluster nodes..." &
SPINNER_PID=$!
cd /Users/julio/Documents/Projects/homelab/talosctl/ || { echo "❌ Failed to change directory"; exit 1; }
./setup.sh > /dev/null 2>&1
rm -f /tmp/spinner.lock
wait $SPINNER_PID 2>/dev/null

# Step 1: Wait for nodes to appear (even NotReady)
wait_for_node_presence

# Step 2: Install Cilium once nodes are detected
install_cilium

# Step 3: Wait for all nodes to become Ready
wait_for_ready_nodes

# Step 4: Install MetalLB
install_metallb

# Step 5: Install Traefik
install_traefik

echo "🎉 Cluster setup, Cilium, MetalLB, and Traefik installation completed successfully!"

